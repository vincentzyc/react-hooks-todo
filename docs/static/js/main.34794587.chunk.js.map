{"version":3,"sources":["context.js","reducer.js","components/TodoHeader.js","components/TodoList.js","components/TodoForm.js","App.js","usePersist.js","serviceWorker.js","index.js"],"names":["Store","React","createContext","todos","reducer","state","action","type","payload","includes","Object","objectSpread","concat","toConsumableArray","filter","t","TodoHeader","props","react_default","a","createElement","className","children","TodoList","count","_useContext","useContext","dispatch","header","length","TodoHeader_TodoHeader","map","key","style","marginLeft","onClick","TodoForm","_useState","useState","_useState2","slicedToArray","todo","setTodo","handleTodoAdd","value","autoFocus","placeholder","onKeyUp","event","keyCode","onChange","e","target","App","globalStore","context","arguments","undefined","persistedContext","localStorage","getItem","JSON","parse","usePersistedContext","_usePersistedReducer","_ref","_ref2","useEffect","setItem","stringify","usePersistedReducer","useReducer","_usePersistedReducer2","Provider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAaeA,EATDC,IAAMC,cAAc,CAChCC,MAAO,CAEL,WACA,YACA,8BCTW,SAASC,EAAQC,EAAOC,GACrC,OAAQA,EAAOC,MACb,IAAK,WAEH,OAAKD,EAAOE,QAIRH,EAAMF,MAAMM,SAASH,EAAOE,SACvBH,EAEFK,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEF,MAAK,GAAAS,OAAAF,OAAAG,EAAA,EAAAH,CAAML,EAAMF,OAAZ,CAAmBG,EAAOE,YARxBH,EAUX,IAAK,WACH,OAAOK,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADL,CAEEF,MAAOE,EAAMF,MAAMW,OAAO,SAAAC,GAAC,OAAIA,IAAMT,EAAOE,YAEhD,QACE,OAAOH,GCnBN,IAAMW,EAAa,SAACC,GAAD,OACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,wBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZJ,EAAMK,YCJE,SAASC,IAAW,IAGfC,EAHeC,EACLC,qBAAW1B,GAA/BK,EADyBoB,EACzBpB,MAAOsB,EADkBF,EAClBE,SAKXC,EACqB,IAAvBvB,EAAMF,MAAM0B,OACVX,EAAAC,EAAAC,cAAA,mDAEAF,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBARJG,EAQ6BnB,EAAMF,MAAM0B,QAPjD,EAAR,aAAAjB,OAAyBY,EAAzB,uBAAAZ,OAAsDY,EAAtD,YAUF,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACCQ,IAGLV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXhB,EAAMF,MAAM4B,IAAI,SAAAhB,GAAC,OAChBG,EAAAC,EAAAC,cAAA,MAAIY,IAAKjB,EAAGM,UAAU,mBACnBN,EACDG,EAAAC,EAAAC,cAAA,UACEC,UAAU,oCACVY,MAAO,CAAEC,WAAY,IACrBC,QAAS,kBAAMR,EAAS,CAAEpB,KAAM,WAAYC,QAASO,MAHvD,oBC9BH,SAASqB,IAAW,IACzBT,EAAaD,qBAAW1B,GAAxB2B,SADyBU,EAKTC,mBAAS,IALAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GAK1BI,EAL0BF,EAAA,GAKpBG,EALoBH,EAAA,GAWjC,SAASI,IACPhB,EAAS,CAAEpB,KAAM,WAAYC,QAASiC,IACtCC,EAAQ,IAOV,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVuB,MAAOH,EACPI,WAAW,EACXC,YAAY,iBACZC,QAdV,SAA0BC,GACF,KAAlBA,EAAMC,SAAgBN,KAclBO,SAxBV,SAA0BC,GACxBT,EAAQS,EAAEC,OAAOR,UAyBX1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBc,QAASQ,GAA7C,WCqBGU,MAnBf,WAEE,IAAMC,ECvCD,SAA6BC,GAAwB,IAAfvB,EAAewB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAT,QAC3CE,EAAmBC,aAAaC,QAAQ5B,GAC9C,OAAO0B,EAAmBG,KAAKC,MAAMJ,GAAoBH,EDqCrCQ,CAAoBrC,qBAAW1B,GAAQ,SAF9CgE,EChCR,SAAAC,GAA+D,IAAAC,EAAAxD,OAAA8B,EAAA,EAAA9B,CAAAuD,EAAA,GAAjC5D,EAAiC6D,EAAA,GAA1BvC,EAA0BuC,EAAA,GAAflC,EAAewB,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAT,QAE3D,OADAW,oBAAU,kBAAMR,aAAaS,QAAQpC,EAAK6B,KAAKQ,UAAUhE,KAAS,CAACA,IAC5D,CAACA,EAAOsB,GDmCW2C,CACxBC,qBAAWnE,EAASkD,GACpB,SAPWkB,EAAA9D,OAAA8B,EAAA,EAAA9B,CAAAsD,EAAA,GAKN3D,EALMmE,EAAA,GAKC7C,EALD6C,EAAA,GAUb,OAEEtD,EAAAC,EAAAC,cAACmC,EAAMkB,SAAP,CAAgB7B,MAAO,CAAEvC,QAAOsB,aAC9BT,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACG,EAAD,QEzCcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.34794587.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Store Context is the global context that is managed by reducers.\r\n\r\nconst Store = React.createContext({\r\n  todos: [\r\n    // Initial Data\r\n    \"Buy milk\",\r\n    \"Some eggs\",\r\n    \"Go to work\"\r\n  ]\r\n});\r\n\r\nexport default Store;\r\n","export default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      // return current state if empty\r\n      if (!action.payload) {\r\n        return state;\r\n      }\r\n      // return current state if duplicate\r\n      if (state.todos.includes(action.payload)) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload]\r\n      };\r\n    case \"COMPLETE\":\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter(t => t !== action.payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const TodoHeader = (props) => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-8\">\r\n      <h5>Todo List</h5>\r\n    </div>\r\n    <div className=\"col-md-4\">\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useContext } from \"react\";\r\nimport Store from \"../context\";\r\nimport { TodoHeader } from \"./TodoHeader\";\r\n\r\nexport default function TodoList() {\r\n  const { state, dispatch } = useContext(Store);\r\n\r\n  const pluralize = count =>\r\n    count > 1 ? `There are ${count} todos.` : `There is ${count} todo.`;\r\n\r\n  let header =\r\n    state.todos.length === 0 ? (\r\n      <h4>Yay! All todos are done! Take a rest!</h4>\r\n    ) : (\r\n      <TodoHeader>\r\n        <span className=\"float-right\">{pluralize(state.todos.length)}</span>\r\n      </TodoHeader>\r\n    );\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <br />\r\n            {header}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <ul className=\"list-group\">\r\n              {state.todos.map(t => (\r\n                <li key={t} className=\"list-group-item\">\r\n                  {t}\r\n                  <button\r\n                    className=\"float-right btn btn-danger btn-sm\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => dispatch({ type: \"COMPLETE\", payload: t })}\r\n                  >\r\n                    Complete\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport Store from \"../context\";\r\n\r\nexport default function TodoForm() {\r\n  const { dispatch } = useContext(Store);\r\n\r\n  // Creating a local state to have currently writing\r\n  // todo item that will be sent to the global store.\r\n  const [todo, setTodo] = useState(\"\");\r\n\r\n  function handleTodoChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  function handleTodoAdd() {\r\n    dispatch({ type: \"ADD_TODO\", payload: todo });\r\n    setTodo(\"\");\r\n  }\r\n\r\n  function handleSubmitForm(event) {\r\n    if (event.keyCode === 13) handleTodoAdd();\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <br />\r\n        <div className=\"input-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            value={todo}\r\n            autoFocus={true}\r\n            placeholder=\"Enter new todo\"\r\n            onKeyUp={handleSubmitForm}\r\n            onChange={handleTodoChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-primary\" onClick={handleTodoAdd}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { useContext, useReducer } from \"react\";\n\nimport Store from \"./context\";\nimport reducer from \"./reducer\";\n\nimport { usePersistedContext, usePersistedReducer } from \"./usePersist\";\n\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\n\nfunction App() {\n  // create a global store to store the state\n  const globalStore = usePersistedContext(useContext(Store), \"state\");\n\n  // `todos` will be a state manager to manage state.\n  const [state, dispatch] = usePersistedReducer(\n    useReducer(reducer, globalStore),\n    \"state\" // The localStorage key\n  );\n\n  return (\n    // State.Provider passes the state and dispatcher to the down\n    <Store.Provider value={{ state, dispatch }}>\n      <TodoForm />\n      <TodoList />\n    </Store.Provider>\n  );\n}\n\nexport default App;\n","import { useEffect } from \"react\";\r\n\r\nexport function usePersistedContext(context, key = \"state\") {\r\n  const persistedContext = localStorage.getItem(key);\r\n  return persistedContext ? JSON.parse(persistedContext) : context;\r\n}\r\n\r\nexport function usePersistedReducer([state, dispatch], key = \"state\") {\r\n  useEffect(() => localStorage.setItem(key, JSON.stringify(state)), [state]);\r\n  return [state, dispatch];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}